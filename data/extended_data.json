[
  {
    "question": "Ömer, C# dilindeki projesine bir fonksiyon eklemek istiyor. C# dilinde fonksiyonu nasıl oluşturabilir?",
    "answer": "C#'ta fonksiyon (metot) oluşturmak için şu yapı kullanılır:\n\n```csharp\n// Basit bir fonksiyon örneği:\nstatic int Topla(int a, int b)\n{\n    return a + b;\n}\n\n// Kullanım:\nint sonuc = Topla(5, 3); // sonuc değişkeni 8 değerini alır.\n```\n\n**Açıklama:**\n\n*   `static`: (isteğe bağlı) Sınıfın bir örneği olmadan erişilebilen metotlar için kullanılır.\n*   `int`: Metotun geri dönüş tipini belirtir (bu örnekte integer). `void` geri dönüşü olmayan metotlar için kullanılır.\n*   `Topla`: Metot adı.\n*   `(int a, int b)`: Metotun parametreleri (girdileri). `a` ve `b` integer tipinde parametrelerdir.\n*   `{ ... }`: Metotun gövdesi (içinde yapılacak işlemler).\n*   `return a + b;`: Metotun sonucu döndürme ifadesi. `return` tipi, metotun geri dönüş tipiyle aynı olmalıdır.\n\nÖmer projesine bu yapıyı kullanarak istediği fonksiyonu ekleyebilir.\n",
    "embedding_score": 0.7757079601287842
  },
  {
    "question": "Modelimde partial view nasıl oluştururum?",
    "answer": "Şu anda dış API'ye erişilemedi. Lütfen daha sonra tekrar deneyin.",
    "embedding_score": 0.7322888970375061
  },
  {
    "question": "C# eklentilerini nasıl kurarım?",
    "answer": "C# eklentileri genellikle NuGet paketleri aracılığıyla kurulur.\n1.  **Visual Studio'da:**\n    *   `Çözüm Gezgini`'nde projeye sağ tıklayın.\n    *   `NuGet Paketlerini Yönet`'i seçin.\n    *   `Gözat` sekmesinde eklentiyi arayın ve `Yükle`'ye tıklayın.\n2.  **.NET CLI ile:**\n    *   Proje dizininde komut istemini açın.\n    *   `dotnet add package [PaketAdı]` komutunu çalıştırın.\nKurulum tamamlandığında, eklenti projenize dahil edilmiş olur.",
    "embedding_score": 0.8527870178222656
  },
  {
    "question": "C#'ta this keyi ile this metodu arasındaki fark nedir?",
    "answer": "*   **`this` anahtar kelimesi:** Bir sınıfın mevcut örneğine referans verir. Alanlara, özelliklere ve metotlara erişmek için kullanılır.\n*   **`this()` metodu:** Bir sınıfın yapıcı metodunu, aynı sınıftaki başka bir yapıcı metottan çağırmak için kullanılır. Yapıcı metod zincirlemesi sağlar.",
    "embedding_score": 0.7654812335968018
  },
  {
    "question": "MVC5 ile gelen yenilikler nelerdir?",
    "answer": "MVC 5 ile gelen yenilikler:\n\n*   **Attribute Routing:** Controller ve action'ları URL'lere bağlamak için daha esnek bir yöntem.\n*   **Filter Override:** Global filtreleri geçersiz kılma özelliği.\n*   **One ASP.NET:** ASP.NET projelerini (Web Forms, MVC, Web API) tek bir projede birleştirme imkanı.\n*   **Bootstrap Entegrasyonu:** Daha iyi duyarlı tasarım için Bootstrap dahil edilmesi.\n*   **Authentication Filters:** Yetkilendirme işleminden önce çalışan özel filtreler.\n*   **ASP.NET Identity:** Y...",
    "embedding_score": 0.7571354508399963
  },
  {
    "question": "MVC yapısı nedir?",
    "answer": "MVC (Model-View-Controller), yazılım tasarımında kullanılan bir mimari desendir. Uygulamayı üç ana bileşene ayırır:\n\n*   **Model:** Veri ve iş mantığını yönetir.\n*   **View:** Kullanıcı arayüzünü (UI) görüntüler.\n*   **Controller:** Kullanıcı girdilerini işler ve Model ile View arasındaki iletişimi sağlar.\n\nBu ayrım, kodun daha düzenli, test edilebilir ve bakımı kolay olmasını sağlar.\n",
    "embedding_score": 0.8739935159683228
  },
  {
    "question": "MVC5 sonrasında MVC6 gelecek mi?",
    "answer": "MVC 5'ten sonra MVC 6 gelmedi. Onun yerine ASP.NET Core MVC geldi. ASP.NET Core MVC, MVC 6'nın evrimleşmiş ve yeniden tasarlanmış halidir.\n",
    "embedding_score": 0.7825899720191956
  }
]